/**
 * This class lets you encode animated GIF files
 * Base class :  http://www.java2s.com/Code/Java/2D-Graphics-GUI/AnimatedGifEncoder.htm
 * @author Kevin Weiner (original Java version - kweiner@fmsware.com)
 * @author Thibault Imbert (AS3 version - bytearray.org)
 * @author Kevin Kwok (JavaScript version - https://github.com/antimatter15/jsgif)
 * @version 0.1 AS3 implementation
 */
class ByteArray{
	constructor(){
		this.bin = [];
		this.chr = [];
		for (let i = 0; i < 256; i++){
			this.chr[i] = String.fromCharCode(i);
		}
	}
	getData() {
		let v = '';
		for (let i = 0; i < this.bin.length; i++)
			v += this.chr[this.bin[i]];
		return v;
	}
	writeByte(val) {
		this.bin.push(val);
	}
	writeUTFBytes(string) {
		for (let i = 0; i < string.length; i++){
			this.writeByte(string.charCodeAt(i));
		}
	}
	writeBytes(array, offset, length) {
		let l = length || array.length;
		for (let i = offset || 0; i < l; i++){
			this.writeByte(array[i]);
		}
	}
	writeShort(pValue) {
		this.writeByte(pValue & 0xFF);
		this.writeByte((pValue >> 8) & 0xFF);
	}
}
class GIFEncoder{
	constructor(){
		this.width; // image size
		this.height;
		this.transparent = null; // transparent color if given
		this.transIndex; // transparent index in color table
		this.repeat = -1; // no repeat
		this.delay = 0; // frame delay (hundredths)
		this.hasStarted = false; // ready to output frames
		this.outputByteArray;
		this.currentFrame; // current frame
		this.pixels; // BGR byte array from frame
		this.indexedPixels; // converted frame indexed to palette
		this.colorDepth; // number of bit planes
		this.rgbPalette; // RGB palette
		this.usedEntry = []; // active palette entries
		this.palSize = 7; // color table size (bits-1)
		this.dispose = -1; // disposal code (-1 = use default)
		this.closeStream = false; // close stream when finished
		this.isFirstFrame = true;
		this.isSizeSet = false; // if false, get size from first frame
		this.sample = 10; // default sample interval for quantizer
		this.comment = "";//"Generated by jsgif (https://github.com/antimatter15/jsgif/)"; // default comment for generated gif
	}
	/**
	 * Resets some members so that a new stream can be started.
	 * This method is actually called by the start method
	 */
	reset() {
		// reset for subsequent use
		this.transIndex = 0;
		this.currentFrame = null;
		this.pixels = null;
		this.indexedPixels = null;
		this.rgbPalette = null;
		this.closeStream = false;
		this.isFirstFrame = true;
	}
	/**
	 * Sets the delay time between each frame, or changes it for subsequent frames
	 * (applies to last frame added)
	 * int delay time in milliseconds
	 * @param ms
	 */
	setDelay(ms) {
		this.delay = Math.round(ms / 10);
	}
	/**
	 * Sets the GIF frame disposal code for the last added frame and any
	 *
	 * subsequent frames. Default is 0 if no transparent color has been set,
	 * otherwise 2.
	 * @param code
	 * int disposal code.
	 */
	setDispose(code) {
		if (code >= 0) this.dispose = code;
	}
	/**
	 * Sets the number of times the set of GIF frames should be played. Default is
	 * 1; 0 means play indefinitely. Must be invoked before the first image is
	 * added.
	 *
	 * @param iter
	 * int number of iterations.
	 * @return
	 */
	setRepeat(iter) {
		if (iter >= 0) this.repeat = iter;
	}
	/**
	 * Sets the transparent color for the last added frame and any subsequent
	 * frames. Since all colors are subject to modification in the quantization
	 * process, the color in the final palette for each frame closest to the given
	 * color becomes the transparent color for that frame. May be set to null to
	 * indicate no transparent color.
	 * @param
	 * Color to be treated as transparent on display.
	 */
	setTransparent(c) {
		this.transparent = c;
	}
	/**
	 * Sets the comment for the block comment
	 * @param
	 * string to be insterted as comment
	 */
	setComment(c) {
		this.comment = c;
	}
	/**
	 * * Sets frame rate in frames per second. Equivalent to
	 * <code>setDelay(1000/fps)</code>.
	 * @param fps
	 * float frame rate (frames per second)
	 */
	setFrameRate(fps) {
		if (fps != 0xf) this.delay = Math.round(100 / fps);
	}
	/**
	 * Sets quality of color quantization (conversion of images to the maximum 256
	 * colors allowed by the GIF specification). Lower values (minimum = 1)
	 * produce better colors, but slow processing significantly. 10 is the
	 * default, and produces good color mapping at reasonable speeds. Values
	 * greater than 20 do not yield significant improvements in speed.
	 * @param quality
	 * int greater than 0.
	 * @return
	 */
	setQuality(quality) {
		if (quality < 1) quality = 1;
		this.sample = quality;
	}
	/**
	 * Sets the GIF frame size. The default size is the size of the first frame
	 * added if this method is not invoked.
	 * @param w
	 * int frame width.
	 * @param h
	 * int frame width.
	 */
	setSize(w, h) {
		if (this.hasStarted && !this.isFirstFrame) return;
		this.width = w;
		this.height = h;
		if (this.width < 1) this.width = 320;
		if (this.height < 1) this.height = 240;
		this.isSizeSet = true;
	}
	setProperties(hasStarted, isFirstFrame) {
		this.hasStarted = hasStarted;
		this.isFirstFrame = isFirstFrame;
	}
	/**
	 * Initiates GIF file creation on the given stream.
	 * @param os
	 * OutputStream on which GIF images are written.
	 * @return false if initial write failed.
	 */
	start() {
		this.reset();
		this.hasStarted = true;
		this.closeStream = false;
		this.outputByteArray = new ByteArray();
		try {
			this.outputByteArray.writeUTFBytes("GIF89a"); // header
		} catch (e) {
			console.log(e);
			this.hasStarted = false;
		}
		return this.hasStarted;
	}
	/**
	 * Adds final trailer to the GIF stream, if you don't call the finish method
	 * the GIF stream will not be valid.
	 */
	finish() {
		if (!this.hasStarted) return false;
		this.hasStarted = false;
		try {
			this.outputByteArray.writeByte(0x3b); // gif trailer
			this.closeStream = true;
		} catch (e) {
			console.log(e);
			return false;
		}
		return true;
	}
	/**
	 * The addFrame method takes an incoming BitmapData object to create each frames
	 * @param
	 * BitmapData object to be treated as a GIF's frame
	 */
	addFrame(im, is_imageData) {
		if ((im === null) || !this.hasStarted || this.outputByteArray === null) {
			throw new Error("Please call start method before calling addFrame");
		}
		try {
			if (!is_imageData) {
				this.currentFrame = im.getImageData(0, 0, im.canvas.width, im.canvas.height).data;
				if (!this.isSizeSet) this.setSize(im.canvas.width, im.canvas.height);
			} else {
				if(im instanceof ImageData) {
					this.currentFrame = im.data;
					if(!this.sizeset || this.width != im.width || this.height != im.height) {
						this.setSize(im.width, im.height);
					} else {
						
					}
				} else if(im instanceof Uint8ClampedArray) {
					if(im.length==(this.width * this.height * 4)) {
						this.currentFrame = im;
					} else {
						console.log("Please set the correct size: ImageData length mismatch");
						return false;
					}
				} else {
					console.log("Please provide correct input");
					return false;
				}
			}	
			this.getImagePixels(); // convert to correct format if necessary
			this.analyzePixels(); // build color table & map pixels
			if (this.isFirstFrame) {
				this.writeLSD(); // logical screen descriptior
				this.writePalette(); // global color table
				if (this.repeat >= 0) {
					// use NS app extension to indicate reps
					this.writeNetscapeExt();
				}
			}
			this.writeGraphicCtrlExt(); // write graphic control extension
			if (this.comment !== '') {
				this.writeCommentExt(); // write comment extension
			}
			this.writeImageDesc(); // image descriptor
			if (!this.isFirstFrame) this.writePalette(); // local color table
			this.writePixels(); // encode and write pixel data
			this.isFirstFrame = false;
		} catch (e) {
			console.log(e);
			return false;
		}
		return true;
	}
	cont() {
		this.reset();
		this.hasStarted = true;
		this.closeStream = false;
		this.outputByteArray = new ByteArray();
		return this.hasStarted;
	}
	/**
	 * Analyzes image colors and creates color map.
	 */
	analyzePixels() {
		this.usedEntry = [];
		let len = this.pixels.length;
		let nPix = len / 3;
		this.indexedPixels = [];
		let nq = new NeuQuant(this.pixels, len, this.sample);
		// initialize quantizer
		this.rgbPalette = nq.process(); // create reduced palette
		// map image pixels to new palette
		let k = 0;
		let index;
		for (let j = 0; j < nPix; j++) {
			index = nq.map(this.pixels[k++] & 0xff, this.pixels[k++] & 0xff, this.pixels[k++] & 0xff);
			this.usedEntry[index] = true;
			this.indexedPixels[j] = index;
		}
		this.pixels = null;
		this.colorDepth = 8;
		this.palSize = 7;
		// get closest match to transparent color if specified
		if (this.transparent !== null) {
			this.transIndex = this.findClosest(this.transparent);
		}
	}
	/**
	 * Returns index of palette color closest to c
	 */
	findClosest(c) {
		if (this.rgbPalette === null) return -1;
		let r = (c & 0xFF0000) >> 16;
		let g = (c & 0x00FF00) >> 8;
		let b = (c & 0x0000FF);
		let minpos = 0;
		let dmin = 256 * 256 * 256;
		let len = this.rgbPalette.length;
		let dr, dg, db, d, index;
		for (let i = 0; i < len;) {
			dr = r - (this.rgbPalette[i++] & 0xff);
			dg = g - (this.rgbPalette[i++] & 0xff);
			db = b - (this.rgbPalette[i] & 0xff);
			d = dr * dr + dg * dg + db * db;
			index = (i + 1) / 3;
			if (this.usedEntry[index] && (d < dmin)) {
				dmin = d;
				minpos = index;
			}
			i++;
		}
		return minpos;
	}
	/**
	 * Extracts image pixels into byte array "pixels
	 */
	getImagePixels() {
		let w = this.width;
		let h = this.height;
		this.pixels = [];
		let data = this.currentFrame;
		let count = 0;
		let b;
		for (let i = 0; i < h; i++) {
			for (let j = 0; j < w; j++) {
				b = (i * w * 4) + j * 4;
				this.pixels[count++] = data[b];
				this.pixels[count++] = data[b + 1];
				this.pixels[count++] = data[b + 2];
			}
		}
	}
	/**
	 * Writes Graphic Control Extension
	 */
	writeGraphicCtrlExt() {
		this.outputByteArray.writeByte(0x21); // extension introducer
		this.outputByteArray.writeByte(0xf9); // GCE label
		this.outputByteArray.writeByte(4); // data block size
		let transp;
		let disp;
		if (this.transparent === null) {
			transp = 0;
			disp = 0; // dispose = no action
		} else {
			transp = 1;
			disp = 2; // force clear if using transparent color
		}
		if (this.dispose >= 0) {
			disp = this.dispose & 7; // user override
		}
		disp <<= 2;
		// packed fields
		this.outputByteArray.writeByte(0 | // 1:3 reserved
			disp | // 4:6 disposal
			0 | // 7 user input - 0 = none
			transp); // 8 transparency flag
		this.outputByteArray.writeShort(this.delay); // delay x 1/100 sec
		this.outputByteArray.writeByte(this.transIndex); // transparent color index
		this.outputByteArray.writeByte(0); // block terminator
	}
	/**
	 * Writes Comment Extention
	 */
	writeCommentExt() {
		this.outputByteArray.writeByte(0x21); // extension introducer
		this.outputByteArray.writeByte(0xfe); // comment label
		this.outputByteArray.writeByte(this.comment.length); // Block Size (s)
		this.outputByteArray.writeUTFBytes(this.comment);
		this.outputByteArray.writeByte(0); // block terminator
	}
	/**
	 * Writes Image Descriptor
	 */
	writeImageDesc() {
		this.outputByteArray.writeByte(0x2c); // image separator
		this.outputByteArray.writeShort(0); // image position x,y = 0,0
		this.outputByteArray.writeShort(0);
		this.outputByteArray.writeShort(this.width); // image size
		this.outputByteArray.writeShort(this.height);
		// packed fields
		if (this.isFirstFrame) {
			// no LCT - GCT is used for first (or only) frame
			this.outputByteArray.writeByte(0);
		} else {
			// specify normal LCT
			this.outputByteArray.writeByte(0x80 | // 1 local color table 1=yes
				0 | // 2 interlace - 0=no
				0 | // 3 sorted - 0=no
				0 | // 4-5 reserved
				this.palSize); // 6-8 size of color table
		}
	}
	/**
	 * Writes Logical Screen Descriptor
	 */
	writeLSD() {
		// logical screen size
		this.outputByteArray.writeShort(this.width);
		this.outputByteArray.writeShort(this.height);
		// packed fields
		this.outputByteArray.writeByte((0x80 | // 1 : global color table flag = 1 (gct used)
			0x70 | // 2-4 : color resolution = 7
			0x00 | // 5 : gct sort flag = 0
			this.palSize)); // 6-8 : gct size
		this.outputByteArray.writeByte(0); // background color index
		this.outputByteArray.writeByte(0); // pixel aspect ratio - assume 1:1
	}
	/**
	 * Writes Netscape application extension to define repeat count.
	 */
	writeNetscapeExt() {
		this.outputByteArray.writeByte(0x21); // extension introducer
		this.outputByteArray.writeByte(0xff); // app extension label
		this.outputByteArray.writeByte(11); // block size
		this.outputByteArray.writeUTFBytes("NETSCAPE" + "2.0"); // app id + auth code
		this.outputByteArray.writeByte(3); // sub-block size
		this.outputByteArray.writeByte(1); // loop sub-block id
		this.outputByteArray.writeShort(this.repeat); // loop count (extra iterations, 0=repeat forever)
		this.outputByteArray.writeByte(0); // block terminator
	}
	/**
	 * Writes color table
	 */
	writePalette() {
		this.outputByteArray.writeBytes(this.rgbPalette);
		let n = (3 * 256) - this.rgbPalette.length;
		for (let i = 0; i < n; i++) this.outputByteArray.writeByte(0);
	}
	/**
	 * Encodes and writes pixel data
	 */
	writePixels() {
		let myencoder = new LZWEncoder(this.width, this.height, this.indexedPixels, this.colorDepth);
		myencoder.encode(this.outputByteArray);
	}
	/**
	 * Retrieves the GIF stream
	 */
	getByteArray() {
		return this.outputByteArray;
	}
	/**
	* @description: Downloads the encoded gif with the given name
	* No need of any conversion from the stream data (out) to base64
	* Solves the issue of large file sizes when there are more frames
	* and does not involve in creation of any temporary data in the process
	* so no wastage of memory, and speeds up the process of downloading
	* to just calling this function.
	* @parameter {String} filename filename used for downloading the gif
	*/
	download(filename) {
		if(this.outputByteArray===null || this.closeStream==false) {
			console.log("Please call start method and add frames and call finish method before calling download"); 
		} else {
			filename = filename !== undefined ? ( filename.endsWith(".gif")? filename: filename+".gif" ): "download.gif";
			let templink = document.createElement("a");
			templink.download=filename;
			templink.href= URL.createObjectURL(new Blob([new Uint8Array(out.bin)], {type : "image/gif" } ));
			templink.click();
		}
	}
}
